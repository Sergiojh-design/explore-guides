/*!
 * Copyright (c) Microsoft Corporation.
 * All rights reserved. See LICENSE in the project root for license information.
 */

import MsDyn365, { IGridSettings, IImageData, Image, RichText, RichTextComponent } from '@msdyn365-commerce/core';
import { htmltoText } from '../../Utilities/analytics/htmlToText';
import * as React from 'react';
import classname from 'classnames';
import { getDynamicImageSettings, getResponsiveImage } from '../../Utilities/get-dynamic-image';
import { IDynamicImagesData } from '../../themes/sergiosthemes/definition-extensions/content-block.ext.props.autogenerated';

interface IContentData {
    image: IImageData;
    contentIndex: number;
    title: RichText;
    description: RichText | undefined;
    gridSettings: IGridSettings;
    linkTo: string;
    useDynamicImages?: boolean;
    dynamicImages?: IDynamicImagesData;
}

export default (props: IContentData) => {
    const styles = 'explore-guides__';
    const {
        image,
        title,
        useDynamicImages,
        dynamicImages,
        description,
        gridSettings,
        linkTo,
        contentIndex
    } = props;

    const cardShape = classname(
            contentIndex === 0 || contentIndex === 2 ? `${styles}card-shape-small-card` : '',
            contentIndex === 1 || contentIndex === 3 ? `${styles}card-shape-medium-card` : '',
            contentIndex === 4 ? `${styles}card-shape-large-card` : ''
        );

    const cardBottomMargin = classname(
        contentIndex === 0 ? `${styles}bottom-margin-small-card` : '',
        contentIndex === 1 ? `${styles}bottom-margin-medium-card` : ''
    );

    const textContainer = classname(
        contentIndex === 0 || contentIndex === 2 ? `${styles}text-container-small-card` : '',
        contentIndex === 1 || contentIndex === 3 ? `${styles}text-container-medium-card` : '',
        contentIndex === 4 ? `${styles}text-container-large-card` : ''
    );

    const arrowAlignment = classname(
        contentIndex === 0 || contentIndex === 2 ? `${styles}arrow-small-card` : '',
        contentIndex === 1 || contentIndex === 3 ? `${styles}arrow-medium-card` : '',
        contentIndex === 4 ? `${styles}arrow-large-card` : ''
    );

    const descriptionContainer = classname(
        contentIndex === 0 || contentIndex === 2 ? `${styles}description-container-small-card` : '',
        contentIndex === 1 || contentIndex === 3 ? `${styles}description-container-medium-card` : '',
        contentIndex === 4 ? `${styles}description-container-large-card` : ''
    );

    let currentImage;

    // Only use Responsive Image if Dynamic Images are defined
    if (dynamicImages && useDynamicImages) {
        currentImage = getResponsiveImage({
            desktop: dynamicImages?.desktopImage,
            tablet: dynamicImages?.tabletImage,
            mobile: dynamicImages?.mobileImage,
            defaultImg: image,
            imageSettingViewports: getDynamicImageSettings({ moduleName: 'explore-guides' })
        });
    }

    const imageDisplay = (useDynamicImages ?
        (
            <div className={`${cardShape}-image`}> {currentImage} </div>
        ) : (
            <Image {...image} alt={image?.altText} className={`${cardShape}-image`} src={image?.src || ''} gridSettings={gridSettings} />
            )
        );

    const titleDisplayed = htmltoText(title.toString()).trim();
    const handleClick = () => {
        if (MsDyn365.isBrowser) {
            // @ts-ignore
            if (utag) {
                // @ts-ignore
                utag.link({
                    event: 'guide-reel',
                    event_category: 'guide reel',
                    event_action: `content slot ${contentIndex + 1} CTA click`,
                    event_label: titleDisplayed,
                    event_noninteraction: 'false'
                });
            }
            window.location.href = linkTo;
        }
    };

    const guideRef = React.useRef<any>();
    React.useEffect(() => {
        guideRef.current && guideRef.current.addEventListener('click', handleClick);
    }, []);

    const preventFocusState = (event: React.MouseEvent<HTMLAnchorElement, MouseEvent>) => {
        event.preventDefault();
    };

    return (
        <a
            ref={guideRef}
            href={linkTo}
            className={classname(`${styles}link`, cardBottomMargin)}
            onMouseDown={preventFocusState}
        >
            <div className={cardShape}>
               {imageDisplay}
                <div className={textContainer}>
                    <div className={`${styles}title`}>
                        <RichTextComponent text={title} />
                    </div>
                    {description && <RichTextComponent className={descriptionContainer} text={description} />}
                    <div className={classname(`${styles}arrow`, arrowAlignment)}></div>
                </div>
            </div>
        </a>
    );
};
